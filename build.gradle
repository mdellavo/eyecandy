task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.11.+'
    }
}

apply plugin: 'android'

dependencies {

    repositories {
        mavenCentral()
        maven {
            url "http://JRAF.org/static/maven/2"
        }
    }

    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.nineoldandroids:library:+'
    compile 'com.android.support:appcompat-v7:19.+'
    compile 'com.android.support:support-v4:19.+'
    compile 'com.android.support:support-v13:19.+'
    compile 'com.android.support:mediarouter-v7:19.+'
    compile 'com.google.android.gms:play-services:4.+'
    compile 'com.mcxiaoke.volley:library-aar:1.+'
    compile 'com.squareup.okhttp:okhttp:1.5.+'
    compile 'com.squareup.picasso:picasso:2.2.+'
    compile 'com.google.code.gson:gson:+'
    compile 'com.google.android.apps.muzei:muzei-api:+'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.0.+'
    compile 'org.jraf:android-switch-backport:1.3.1'

    compile project(':orm-android')

}

def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
    println "VersionCode is set to $code"
    return code
}

def getVersionName = { ->
    def name = project.hasProperty('versionName') ? versionName : ""
    println "VersionName is set to $name"
    return name
}


android {
    compileSdkVersion 'Google Inc.:Google APIs:19'
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19

        versionCode getVersionCode()
        versionName getVersionName()

    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword "xxx"
            keyAlias "quuux"
            keyPassword "xxx"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }

}

task askForPasswords << {
    def password = new String(System.console().readPassword("\n\npassword: "))
    android.signingConfigs.release.storePassword = password
    android.signingConfigs.release.keyPassword = password
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}