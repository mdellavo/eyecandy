task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
    }
}

apply plugin: 'android'

dependencies {

    repositories {
        mavenCentral()
        maven {
            url 'https://github.com/Goddchen/mvn-repo/raw/master/'
        }
    }

    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.nineoldandroids:library:+'
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-v4:+'
    compile 'com.android.support:support-v13:18.0.+'
    compile 'com.google.android.gms:play-services:4.0.30'
    compile 'com.android:volley:+'
    compile 'com.squareup.okhttp:okhttp:+'
    compile 'com.squareup.picasso:picasso:+'
    compile 'com.google.code.gson:gson:+'

    compile project(':orm-android')

}

android {
    compileSdkVersion 'Google Inc.:Google APIs:19'
    buildToolsVersion "19.0.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        release {
            storeFile file('release.keystore')
            storePassword "xxx"
            keyAlias "xxx"
            keyPassword "xxx"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

}

task askForPasswords << {
    def storePw = new String(System.console().readPassword("Keystore password: "))
    def keyAlias = System.console().readLine("\n\$ Enter key alias: ")
    def keyPw  = new String(System.console().readPassword("Key password: "))

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.keyPassword = keyPw
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}